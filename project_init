#!/bin/bash

# Clean name.
# @param input.
function clean_name(){    
    local -n ref=$1; # Obtain the value of the pointed variable.

    text=${ref}; # Obtain the value of the referenced variable
    #text=${text//_/}; # Strip underscores.
    text=${text// /_}; # Replace spaces with underscores.
    # Clean out anything that's not alphanumeric or an underscore.
    text=${text//[^a-zA-Z0-9_]/};
    text=`echo -n $text | tr A-Z a-z`; # Sring to lowercase.

    ref=${text}; # Copy handled text to pointed variable.

    return 0;
}

# Clean description.
# @param input.
function clean_description(){    
    local -n ref=$1; # Obtain the value of the pointed variable.

    text=${ref}; # Obtain the value of the referenced variable
    # Clean out slash.
    text=${text//[\/]/};
    
    ref=${text}; # Copy handled text to pointed variable.

    return 0;
}

# Project data confirmation.
function confirm_project_data(){
    echo -e "\e[32m>\e[0m Project configuration is:"
    echo -e "\e[32m>\e[0m \tProject name: "${PROJECT_NAME}
    echo -e "\e[32m>\e[0m \tProject description: "${PROJECT_DESCRIPTION}
    echo -e "\e[32m>\e[0m \tDeveloper mail: "${MAIL}
    echo -en "\e[32m>\e[0m Is it correct? \e[2m(y/N)\e[0m ";
    read bool;
    bool=${bool:-No};
    case "$bool" in
        [yY]|[yY][eE][sS])
            ;;
        [nN]|[nN][oO])
            echo "User canceled project initialization.";
            exit 1;
            ;;
        *)
            ;;
    esac
}

# Check if name is given as argument.
if [ "$1" == "" ] ; then
    # Request project name.
    echo -en "\e[32m>\e[0m Introduce the name of the project: ";
    read PROJECT_NAME; # Read from input.

    # Request project description.
    echo -en "\e[32m>\e[0m Introduce a short description of the project: ";
    read PROJECT_DESCRIPTION; # Read from input.

    # Request project author mail.
    echo -en "\e[32m>\e[0m Introduce the mail of the author: ";
    read MAIL; # Read from input.
else
    PROJECT_NAME=${@:1:$#-2}; # Take project name from arguments.
    PROJECT_DESCRIPTION=${@:2:$#-2}; # Take project description from arguments.
    MAIL=${@:$#}; # Take developer mail from arguments.
fi;

# Clean project name
clean_name PROJECT_NAME;

# Clean project description
clean_description PROJECT_DESCRIPTION;

# Check mail format
MAIL_REGEX="^[a-z0-9!#\$%&'*+/=?^_\`{|}~-]+(\.[a-z0-9!#$%&'*+/=?^_\`{|}~-]+)*@([a-z0-9]([a-z0-9-]*[a-z0-9])?\.)+[a-z0-9]([a-z0-9-]*[a-z0-9])?\$"
if ! [[ ${MAIL} =~ ${MAIL_REGEX} ]] ; then
    echo "Wrong mail format: " ${MAIL}
    exit 1;
fi

# Confirm project data.
confirm_project_data ${PROJECT_NAME};

echo -e "\e[32m>\e[0m Initializing project "${PROJECT_NAME}".";

# Replace name in all files.
find . -type f -exec \
    sed -i 's/[mM][yY]_[pP][rR][oO][gG][rR][aA][mM]/'${PROJECT_NAME}'/g' {} \;

# Replace description.
sed -i 's/Short_description/'"${PROJECT_DESCRIPTION}"'/g' README.md;

# Replace mail.
sed -i 's/user@mail.com/'${MAIL}'/g' configure.ac;

# Rename files and folders.
mv include/my_program/my_program.h include/my_program/${PROJECT_NAME}.h
mv include/my_program include/${PROJECT_NAME}
mv src/my_program.c src/${PROJECT_NAME}.c
mv tests/my_program_test.c tests/${PROJECT_NAME}_test.c
mv tests/my_program_test.supp tests/${PROJECT_NAME}_test.supp
mv man/my_program.man man/${PROJECT_NAME}.man

echo -e "\e[32m>\e[0m Finished project initialization.";

rm -rf .git; # Remove git.
rm project_init; # Remove self.
